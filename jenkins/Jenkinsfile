#!/usr/bin/groovy

@Library('muztagh-shared-library@master')

def pipeline = new muztagh.jenkinslib.Pipeline()
def server = Artifactory.server 'localartifactory'
def rtMaven = Artifactory.newMavenBuild()

options {
  buildDiscarder(logRotator(numToKeepStr:'10'))
  timeout(time: 5, unit: 'MINUTES')
  ansiColor('xterm')
}

node {
    try{
        pipeline.notifyBuild('STARTED')
        docker.image('maven:3-alpine').inside('-v /root/.m2:/root/.m2') {
            stage('Build') {
                checkout scm
                sh 'mvn -B -DskipTests clean package'
            }
            stage('Test') {
                try {
                    sh 'mvn test'
                }
            finally {
                    junit 'target/surefire-reports/*.xml'
                }
            }
            stage('Deliver') {
                sh './jenkins/scripts/deliver.sh'
            }
            stage('Archive') {
                archiveArtifacts artifacts: 'target/*.jar'
            }
            stage('Publish') {
                rtMaven.resolver server: server
                rtMaven.deployer server: server
                rtMaven.deployer.artifactDeploymentPatterns.addInclude("frog*").addExclude("*.zip")
                // Set a Maven Tool defined in Jenkins "Manage":
                rtMaven.tool = 'M3'
                // Optionally set Maven Ops
                rtMaven.opts = '-Xms1024m -Xmx4096m'
                // Run Maven:
                def buildInfo = rtMaven.run pom: 'pom.xml', goals: 'clean install'
                // Alternatively, you can pass an existing build-info instance to the run method:
                // rtMaven.run pom: 'maven-example/pom.xml', goals: 'clean install', buildInfo: buildInfo
                
                // Publish the build-info to Artifactory:
                server.publishBuildInfo buildInfo
            }
        }
    } catch(e) {
        currentBuild.result = "FAILED"
        throw e
    } finally {
        pipeline.notifyBuild(currentBuild.result)
    }
}
